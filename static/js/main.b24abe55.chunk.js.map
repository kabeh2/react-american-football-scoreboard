{"version":3,"sources":["components/buttons.js","components/topRow.js","BottomRow.js","components/scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","react_default","a","createElement","className","onClick","setHomeTouchDown","setHomeScore","homeScore","setAwayTouchDown","setAwayFieldGoal","TopRow","awayScore","BottomRow","Scoreboard","topRow","src_BottomRow","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","setAwayScore","setHomeFieldGoal","scoreboard","buttons","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b24abe55.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nconst Buttons = props => {\n  return (\n    <section className=\"buttons\">\n      <div className=\"homeButtons\">\n        {/* TODO STEP 4 - Now we need to attach our state setter functions to click listeners. */}\n        <button\n          className=\"homeButtons__touchdown\"\n          onClick={props.setHomeTouchDown}\n        >\n          Home Touchdown\n        </button>\n        <button\n          className=\"homeButtons__fieldGoal\"\n          onClick={() => props.setHomeScore(props.homeScore + 3)}\n        >\n          Home Field Goal\n        </button>\n      </div>\n      <div className=\"awayButtons\">\n        <button\n          className=\"awayButtons__touchdown\"\n          onClick={props.setAwayTouchDown}\n        >\n          Away Touchdown\n        </button>\n        <button\n          className=\"awayButtons__fieldGoal\"\n          onClick={props.setAwayFieldGoal}\n        >\n          Away Field Goal\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Buttons;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst TopRow = props => {\n  return (\n    <div className=\"topRow\">\n      <div className=\"home\">\n        <h2 className=\"home__name\">Lions</h2>\n\n        {/* TODO STEP 3 - We need to change the hardcoded values in these divs to accept dynamic values from our state. */}\n\n        <div className=\"home__score\">{props.homeScore}</div>\n      </div>\n      <div className=\"timer\">00:03</div>\n      <div className=\"away\">\n        <h2 className=\"away__name\">Tigers</h2>\n        <div className=\"away__score\">{props.awayScore}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default TopRow;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst BottomRow = () => {\n  return (\n    <div className=\"bottomRow\">\n      <div className=\"down\">\n        <h3 className=\"down__title\">Down</h3>\n        <div className=\"down__value\">3</div>\n      </div>\n      <div className=\"toGo\">\n        <h3 className=\"toGo__title\">To Go</h3>\n        <div className=\"toGo__value\">7</div>\n      </div>\n      <div className=\"ballOn\">\n        <h3 className=\"ballOn__title\">Ball on</h3>\n        <div className=\"ballOn__value\">21</div>\n      </div>\n      <div className=\"quarter\">\n        <h3 className=\"quarter__title\">Quarter</h3>\n        <div className=\"quarter__value\">4</div>\n      </div>\n    </div>\n  );\n};\n\nexport default BottomRow;\n","import React from \"react\";\nimport \"../App.css\";\n\nimport TopRow from \"./topRow\";\nimport BottomRow from \"../BottomRow\";\n\nconst Scoreboard = props => {\n  return (\n    <section className=\"scoreboard\">\n      <TopRow homeScore={props.homeScore} awayScore={props.awayScore} />\n      <BottomRow />\n    </section>\n  );\n};\n\nexport default Scoreboard;\n","//TODO: STEP 1 - Import the useState hook.\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Buttons from \"./components/buttons\";\nimport Scoreboard from \"./components/scoreboard\";\n\nfunction App() {\n  //TODO: STEP 2 - Establish your applictaion's state with some useState hooks.  You'll need one for the home score and another for the away score.\n\n  const [homeScore, setHomeScore] = useState(0);\n  const [awayScore, setAwayScore] = useState(0);\n\n  const setHomeTouchDown = () => {\n    setHomeScore(homeScore + 7);\n  };\n\n  const setHomeFieldGoal = () => {\n    setHomeScore(homeScore + 3);\n  };\n\n  const setAwayTouchDown = () => {\n    setAwayScore(awayScore + 7);\n  };\n\n  const setAwayFieldGoal = () => {\n    setAwayScore(awayScore + 3);\n  };\n\n  return (\n    <div className=\"container\">\n      <Scoreboard\n        homeScore={homeScore}\n        setHomeScore={setHomeScore}\n        awayScore={awayScore}\n        setAwayScore={setAwayScore}\n        setHomeTouchDown={setHomeTouchDown}\n        setHomeFieldGoal={setHomeFieldGoal}\n        setAwayTouchDown={setAwayTouchDown}\n        setAwayFieldGoal={setAwayFieldGoal}\n      />\n      <Buttons\n        homeScore={homeScore}\n        setHomeScore={setHomeScore}\n        awayScore={awayScore}\n        setAwayScore={setAwayScore}\n        setHomeTouchDown={setHomeTouchDown}\n        setHomeFieldGoal={setHomeFieldGoal}\n        setAwayTouchDown={setAwayTouchDown}\n        setAwayFieldGoal={setAwayFieldGoal}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}